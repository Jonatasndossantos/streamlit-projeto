import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime
from scipy.stats import entropy

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Portal Transpar√™ncia Rifaina - Execu√ß√£o Or√ßament√°ria", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para carregar e processar dados
@st.cache_data
def load_data():
    """Carrega e processa os dados de execu√ß√£o or√ßament√°ria e LOA"""
    
    # Carregar dados de receitas executadas
    try:
        receitas_executadas = pd.read_csv("Portal Transparencia Receitas Acumuladas - Exerc√≠cio 2025 (1).csv", 
                                        sep=';', encoding='utf-8')
    except:
        receitas_executadas = pd.read_csv("Portal Transparencia Receitas Acumuladas - Exerc√≠cio 2025 (1).csv", 
                                        sep=';', encoding='latin-1')
    
    # Carregar dados de despesas executadas
    try:
        despesas_executadas = pd.read_csv("Portal Transparencia Despesas Gerais - Exerc√≠cio 2025.csv", 
                                        sep=';', encoding='utf-8')
    except:
        despesas_executadas = pd.read_csv("Portal Transparencia Despesas Gerais - Exerc√≠cio 2025.csv", 
                                        sep=';', encoding='latin-1')
    
    # Carregar dados da LOA (receitas or√ßadas)
    try:
        receitas_orcadas = pd.read_csv("download-123842.557.csv", sep=';', encoding='utf-8')
    except:
        receitas_orcadas = pd.read_csv("download-123842.557.csv", sep=';', encoding='latin-1')
    
    # Carregar estrutura de receitas da LOA
    try:
        estrutura_receitas = pd.read_csv("download-123701.452.csv", sep=';', encoding='utf-8')
    except:
        estrutura_receitas = pd.read_csv("download-123701.452.csv", sep=';', encoding='latin-1')
    
    return receitas_executadas, despesas_executadas, receitas_orcadas, estrutura_receitas

def format_currency(value):
    """Formata valores em moeda brasileira"""
    if pd.isna(value) or value == 0:
        return "R$ 0,00"
    return f"R$ {value:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

def parse_currency(value_str):
    """Converte string de moeda brasileira para float"""
    if pd.isna(value_str) or value_str == '' or value_str == 0:
        return 0.0
    
    # Se j√° for um n√∫mero, retorna como est√°
    if isinstance(value_str, (int, float)):
        return float(value_str)
    
    # Remove pontos de milhares e substitui v√≠rgula por ponto decimal
    try:
        cleaned = str(value_str).replace('.', '').replace(',', '.')
        return float(cleaned)
    except:
        return 0.0

def process_receitas_data(df):
    """Processa dados de receitas"""
    df = df.copy()
    
    # Converter valores monet√°rios
    for col in ['Prev. Inicial', 'Prev. Atualizada', 'Arrec. Per√≠odo', 'Arrec. Total']:
        if col in df.columns:
            df[col] = df[col].apply(parse_currency)
    
    return df

def process_despesas_data(df):
    """Processa dados de despesas"""
    df = df.copy()
    
    # Converter valores monet√°rios
    for col in ['Dota√ß√£o', 'Altera√ß√£o Dota√ß√£o', 'Dota√ß√£o Atual', 'Valor Anulado', 
                'Refor√ßo', 'Valor Empenhado', 'Valor Liquidado', 'Valor Pago',
                'Empenhado at√© Hoje', 'Liquidado at√© Hoje', 'Pago at√© Hoje']:
        if col in df.columns:
            df[col] = df[col].apply(parse_currency)
    
    # Converter data
    if 'Data' in df.columns:
        df['Data'] = pd.to_datetime(df['Data'], format='%d/%m/%Y', errors='coerce')
    
    return df

def process_loa_data(df):
    """Processa dados da LOA"""
    df = df.copy()
    
    # Converter valores monet√°rios da LOA
    if 'TOTOR' in df.columns:
        df['TOTOR'] = pd.to_numeric(df['TOTOR'], errors='coerce').fillna(0)
    
    return df

# Carregar dados
st.title("üèõÔ∏è Portal Transpar√™ncia - Munic√≠pio de Rifaina")
st.markdown("**An√°lise Completa: LOA vs Execu√ß√£o Or√ßament√°ria 2025**")

with st.spinner("Carregando dados de execu√ß√£o or√ßament√°ria e LOA..."):
    receitas_raw, despesas_raw, receitas_loa_raw, estrutura_loa_raw = load_data()

# Processar dados
receitas_df = process_receitas_data(receitas_raw)
despesas_df = process_despesas_data(despesas_raw)
receitas_loa_df = process_loa_data(receitas_loa_raw)
estrutura_loa_df = process_loa_data(estrutura_loa_raw)

# Verificar se os dados foram carregados corretamente
if receitas_df.empty or despesas_df.empty or receitas_loa_df.empty:
    st.error("Erro ao carregar os dados. Verifique os arquivos CSV.")
    st.stop()

# Calcular totais das receitas (execu√ß√£o)
total_previsto_receitas = receitas_df['Prev. Atualizada'].sum()
total_arrecadado_receitas = receitas_df['Arrec. Total'].sum()
percentual_execucao_receitas = (total_arrecadado_receitas / total_previsto_receitas * 100) if total_previsto_receitas > 0 else 0

# Calcular totais da LOA (or√ßamento original)
total_loa_receitas = receitas_loa_df['TOTOR'].sum()

# Calcular totais das despesas
total_dotacao_despesas = despesas_df['Dota√ß√£o Atual'].sum()
total_empenhado_despesas = despesas_df['Empenhado at√© Hoje'].sum()
total_liquidado_despesas = despesas_df['Liquidado at√© Hoje'].sum()
total_pago_despesas = despesas_df['Pago at√© Hoje'].sum()

# Sidebar com informa√ß√µes gerais
st.sidebar.header("üìä Resumo Executivo")

# Compara√ß√£o LOA vs Execu√ß√£o
st.sidebar.subheader("üí∞ Receitas")
st.sidebar.metric("üéØ LOA Original", format_currency(total_loa_receitas))
st.sidebar.metric("üìà Arrecadado", format_currency(total_arrecadado_receitas))
execucao_vs_loa = (total_arrecadado_receitas / total_loa_receitas * 100) if total_loa_receitas > 0 else 0
st.sidebar.metric("üìä Execu√ß√£o vs LOA", f"{execucao_vs_loa:.1f}%")

st.sidebar.subheader("üí≥ Despesas") 
st.sidebar.metric("üìâ Empenhado", format_currency(total_empenhado_despesas))
st.sidebar.metric("‚úÖ Liquidado", format_currency(total_liquidado_despesas))
st.sidebar.metric("üí∏ Pago", format_currency(total_pago_despesas))

st.sidebar.subheader("üîç Resultado")
resultado_orcamentario = total_arrecadado_receitas - total_empenhado_despesas
cor_resultado = "normal" if resultado_orcamentario >= 0 else "inverse"
st.sidebar.metric("üí∞ Saldo Or√ßament√°rio", format_currency(resultado_orcamentario), 
                 delta_color=cor_resultado)

# Menu de navega√ß√£o
opcao = st.sidebar.selectbox(
    "üìä Escolha a an√°lise:",
    ["Vis√£o Geral", "üéØ M√©tricas Completas", "LOA vs Execu√ß√£o", "Receitas Executadas", "Despesas Executadas", 
     "Compara√ß√£o Previsto vs Realizado", "An√°lise por Fun√ß√£o", "Detalhamento"]
)

# CSS personalizado
st.markdown("""
<style>
.metric-card {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #1f77b4;
}
.positive-result {
    color: #2E8B57;
    font-weight: bold;
}
.negative-result {
    color: #DC143C;
    font-weight: bold;
}
.big-font {
    font-size: 20px !important;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

# ==============================================================================
# VIS√ÉO GERAL
# ==============================================================================
if opcao == "Vis√£o Geral":
    st.header("üìà Vis√£o Geral da Execu√ß√£o Or√ßament√°ria")
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üí∞ Total Arrecadado",
            format_currency(total_arrecadado_receitas),
            f"{percentual_execucao_receitas:.1f}% do previsto"
        )
    
    with col2:
        st.metric(
            "üìä Total Empenhado",
            format_currency(total_empenhado_despesas),
            f"{(total_empenhado_despesas/total_dotacao_despesas*100):.1f}% da dota√ß√£o"
        )
    
    with col3:
        st.metric(
            "‚úÖ Total Liquidado",
            format_currency(total_liquidado_despesas),
            f"{(total_liquidado_despesas/total_empenhado_despesas*100):.1f}% do empenhado"
        )
    
    with col4:
        st.metric(
            "üí≥ Total Pago",
            format_currency(total_pago_despesas),
            f"{(total_pago_despesas/total_liquidado_despesas*100):.1f}% do liquidado"
        )
    
    st.divider()
    
    # Gr√°ficos da vis√£o geral
    col1, col2 = st.columns(2)
    
    with col1:
        # Compara√ß√£o Receitas vs Despesas
        fig_comparacao = go.Figure(data=[
            go.Bar(name='Receitas', x=['Previsto', 'Realizado'], 
                  y=[total_previsto_receitas, total_arrecadado_receitas], 
                  marker_color='#2E8B57'),
            go.Bar(name='Despesas', x=['Dotado', 'Empenhado'], 
                  y=[total_dotacao_despesas, total_empenhado_despesas], 
                  marker_color='#DC143C')
        ])
        
        fig_comparacao.update_layout(
            title="Receitas vs Despesas - Previsto vs Realizado",
            barmode='group',
            height=400
        )
        
        st.plotly_chart(fig_comparacao, use_container_width=True)
    
    with col2:
        # Execu√ß√£o das Despesas (Funil)
        fases_despesas = ['Dotado', 'Empenhado', 'Liquidado', 'Pago']
        valores_despesas = [total_dotacao_despesas, total_empenhado_despesas, 
                          total_liquidado_despesas, total_pago_despesas]
        
        fig_funil = go.Figure(go.Funnel(
            y=fases_despesas,
            x=valores_despesas,
            textinfo="value+percent previous",
            marker={"color": ["deepskyblue", "lightsalmon", "lightgreen", "gold"]}
        ))
        
        fig_funil.update_layout(
            title="Funil de Execu√ß√£o das Despesas",
            height=400
        )
        
        st.plotly_chart(fig_funil, use_container_width=True)

# ==============================================================================
# M√âTRICAS COMPLETAS
# ==============================================================================
elif opcao == "üéØ M√©tricas Completas":
    st.header("üéØ M√©tricas Completas de Gest√£o Or√ßament√°ria")
    st.markdown("**Todos os indicadores financeiros, fiscais e de performance do munic√≠pio**")
    
    # Calcular m√©tricas adicionais
    pop_estimada = 5000  # Popula√ß√£o estimada de Rifaina
    
    # M√©tricas b√°sicas
    receita_per_capita = total_arrecadado_receitas / pop_estimada
    despesa_per_capita = total_empenhado_despesas / pop_estimada
    
    # M√©tricas de execu√ß√£o
    execucao_financeira = (total_pago_despesas / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
    execucao_orcamentaria = (total_empenhado_despesas / total_dotacao_despesas * 100) if total_dotacao_despesas > 0 else 0
    
    # M√©tricas de liquidez
    liquidez_geral = (total_arrecadado_receitas / total_empenhado_despesas) if total_empenhado_despesas > 0 else 0
    resto_a_pagar = total_liquidado_despesas - total_pago_despesas
    
    # M√©tricas de autonomia fiscal
    receitas_tributarias = receitas_df[receitas_df['C√≥digo'].str.startswith(('1112', '1113', '1114', '1121', '1122'))]['Arrec. Total'].sum()
    transferencias = receitas_df[receitas_df['C√≥digo'].str.startswith(('1711', '1712', '1713', '1714', '1716', '1721', '1722', '1723', '1724', '1751'))]['Arrec. Total'].sum()
    
    autonomia_fiscal = (receitas_tributarias / total_arrecadado_receitas * 100) if total_arrecadado_receitas > 0 else 0
    dependencia_transferencias = (transferencias / total_arrecadado_receitas * 100) if total_arrecadado_receitas > 0 else 0
    
    # M√©tricas por √°rea (Sa√∫de, Educa√ß√£o, etc.)
    saude_despesas = despesas_df[despesas_df['Fun√ß√£o'] == '10']['Empenhado at√© Hoje'].sum()
    educacao_despesas = despesas_df[despesas_df['Fun√ß√£o'] == '12']['Empenhado at√© Hoje'].sum()
    assistencia_despesas = despesas_df[despesas_df['Fun√ß√£o'] == '08']['Empenhado at√© Hoje'].sum()
    
    saude_percentual = (saude_despesas / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
    educacao_percentual = (educacao_despesas / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
    
    # ==============================================================================
    # SE√á√ÉO 1: M√âTRICAS FINANCEIRAS B√ÅSICAS
    # ==============================================================================
    st.subheader("üí∞ 1. M√©tricas Financeiras B√°sicas")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "üíµ Receita Total",
            format_currency(total_arrecadado_receitas),
            help="Total de receitas arrecadadas no per√≠odo"
        )
    
    with col2:
        st.metric(
            "üí∏ Despesa Total",
            format_currency(total_empenhado_despesas),
            help="Total de despesas empenhadas no per√≠odo"
        )
    
    with col3:
        st.metric(
            "‚öñÔ∏è Saldo Or√ßament√°rio",
            format_currency(resultado_orcamentario),
            f"{((resultado_orcamentario/total_arrecadado_receitas)*100):.1f}% da receita" if total_arrecadado_receitas > 0 else "0%"
        )
    
    with col4:
        st.metric(
            "üë• Receita per Capita",
            format_currency(receita_per_capita),
            help=f"Receita por habitante (pop. estimada: {pop_estimada:,})"
        )
    
    with col5:
        st.metric(
            "üë• Despesa per Capita",
            format_currency(despesa_per_capita),
            help=f"Despesa por habitante (pop. estimada: {pop_estimada:,})"
        )
    
    # ==============================================================================
    # SE√á√ÉO 2: M√âTRICAS DE EXECU√á√ÉO OR√áAMENT√ÅRIA
    # ==============================================================================
    st.subheader("üìä 2. M√©tricas de Execu√ß√£o Or√ßament√°ria")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "üéØ Execu√ß√£o LOA",
            f"{execucao_vs_loa:.1f}%",
            "Arrecadado vs LOA Original",
            help="Percentual da LOA efetivamente arrecadado"
        )
    
    with col2:
        st.metric(
            "üìà Execu√ß√£o Portal",
            f"{percentual_execucao_receitas:.1f}%",
            "Arrecadado vs Previsto Atualizado",
            help="Execu√ß√£o conforme Portal de Transpar√™ncia"
        )
    
    with col3:
        st.metric(
            "üíº Execu√ß√£o Or√ßament√°ria",
            f"{execucao_orcamentaria:.1f}%",
            "Empenhado vs Dotado",
            help="Percentual da dota√ß√£o or√ßament√°ria executada"
        )
    
    with col4:
        st.metric(
            "üí≥ Execu√ß√£o Financeira",
            f"{execucao_financeira:.1f}%",
            "Pago vs Empenhado",
            help="Percentual dos empenhos efetivamente pagos"
        )
    
    with col5:
        st.metric(
            "üìã Liquida√ß√£o",
            f"{(total_liquidado_despesas/total_empenhado_despesas*100):.1f}%" if total_empenhado_despesas > 0 else "0%",
            "Liquidado vs Empenhado",
            help="Percentual dos empenhos liquidados"
        )
    
    # ==============================================================================
    # SE√á√ÉO 3: M√âTRICAS DE AUTONOMIA FISCAL
    # ==============================================================================
    st.subheader("üèõÔ∏è 3. M√©tricas de Autonomia Fiscal")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        cor_autonomia = "normal" if autonomia_fiscal > 20 else "inverse"
        st.metric(
            "üéØ Autonomia Fiscal",
            f"{autonomia_fiscal:.1f}%",
            "Receitas Pr√≥prias / Total",
            delta_color=cor_autonomia,
            help="Percentual de receitas pr√≥prias (impostos e taxas)"
        )
    
    with col2:
        cor_dependencia = "inverse" if dependencia_transferencias > 70 else "normal"
        st.metric(
            "üîÑ Depend√™ncia Transfer√™ncias",
            f"{dependencia_transferencias:.1f}%",
            "Transfer√™ncias / Total",
            delta_color=cor_dependencia,
            help="Depend√™ncia de transfer√™ncias intergovernamentais"
        )
    
    with col3:
        outras_receitas = total_arrecadado_receitas - receitas_tributarias - transferencias
        outras_percentual = (outras_receitas / total_arrecadado_receitas * 100) if total_arrecadado_receitas > 0 else 0
        st.metric(
            "üìä Outras Receitas",
            f"{outras_percentual:.1f}%",
            format_currency(outras_receitas),
            help="Patrimoniais, servi√ßos e outras receitas"
        )
    
    with col4:
        equilibrio_score = 100 - abs(50 - autonomia_fiscal) - abs(dependencia_transferencias - 60)
        equilibrio_score = max(0, equilibrio_score)
        st.metric(
            "‚öñÔ∏è Equil√≠brio Fiscal",
            f"{equilibrio_score:.0f}/100",
            "Score de Sustentabilidade",
            help="√çndice de equil√≠brio entre receitas pr√≥prias e transfer√™ncias"
        )
    
    # ==============================================================================
    # SE√á√ÉO 4: M√âTRICAS POR √ÅREA DE GOVERNO
    # ==============================================================================
    st.subheader("üèõÔ∏è 4. M√©tricas por √Årea de Governo")
    
    # Calcular m√©tricas constitucionais
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        cor_saude = "normal" if saude_percentual >= 15 else "inverse"
        st.metric(
            "üè• Sa√∫de",
            f"{saude_percentual:.1f}%",
            format_currency(saude_despesas),
            delta_color=cor_saude,
            help="M√≠nimo constitucional: 15% (munic√≠pios)"
        )
    
    with col2:
        cor_educacao = "normal" if educacao_percentual >= 25 else "inverse"
        st.metric(
            "üéì Educa√ß√£o",
            f"{educacao_percentual:.1f}%",
            format_currency(educacao_despesas),
            delta_color=cor_educacao,
            help="M√≠nimo constitucional: 25% (munic√≠pios)"
        )
    
    with col3:
        assistencia_percentual = (assistencia_despesas / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
        st.metric(
            "ü§ù Assist√™ncia Social",
            f"{assistencia_percentual:.1f}%",
            format_currency(assistencia_despesas),
            help="Gastos com assist√™ncia social"
        )
    
    with col4:
        # Calcular investimentos (natureza 4.4)
        investimentos = despesas_df[despesas_df['Natureza'].str.startswith('4.4', na=False)]['Empenhado at√© Hoje'].sum()
        investimentos_percentual = (investimentos / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
        st.metric(
            "üèóÔ∏è Investimentos",
            f"{investimentos_percentual:.1f}%",
            format_currency(investimentos),
            help="Despesas de capital - investimentos"
        )
    
    with col5:
        # Calcular custeio (natureza 3.3)
        custeio = despesas_df[despesas_df['Natureza'].str.startswith('3.3', na=False)]['Empenhado at√© Hoje'].sum()
        custeio_percentual = (custeio / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
        st.metric(
            "üîß Custeio",
            f"{custeio_percentual:.1f}%",
            format_currency(custeio),
            help="Outras despesas correntes"
        )
    
    # ==============================================================================
    # SE√á√ÉO 5: M√âTRICAS DE LIQUIDEZ E FLUXO
    # ==============================================================================
    st.subheader("üíß 5. M√©tricas de Liquidez e Fluxo Financeiro")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        cor_liquidez = "normal" if liquidez_geral >= 1.0 else "inverse"
        st.metric(
            "üíß Liquidez Geral",
            f"{liquidez_geral:.2f}",
            "Receita / Despesa",
            delta_color=cor_liquidez,
            help="Capacidade de honrar compromissos (ideal ‚â• 1.0)"
        )
    
    with col2:
        st.metric(
            "‚è≥ Resto a Pagar",
            format_currency(resto_a_pagar),
            f"{(resto_a_pagar/total_liquidado_despesas*100):.1f}% do liquidado" if total_liquidado_despesas > 0 else "0%",
            help="Valor liquidado mas ainda n√£o pago"
        )
    
    with col3:
        disponibilidade_caixa = total_arrecadado_receitas - total_pago_despesas
        st.metric(
            "üí∞ Disponibilidade",
            format_currency(disponibilidade_caixa),
            f"{(disponibilidade_caixa/total_arrecadado_receitas*100):.1f}% da receita" if total_arrecadado_receitas > 0 else "0%",
            help="Saldo dispon√≠vel (receita - pago)"
        )
    
    with col4:
        rotatividade = (total_pago_despesas / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
        st.metric(
            "üîÑ Rotatividade",
            f"{rotatividade:.1f}%",
            "Velocidade de Pagamento",
            help="Efici√™ncia no pagamento de compromissos"
        )
    
    # ==============================================================================
    # SE√á√ÉO 6: M√âTRICAS DE EFICI√äNCIA E PRODUTIVIDADE
    # ==============================================================================
    st.subheader("‚ö° 6. M√©tricas de Efici√™ncia e Produtividade")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # Efici√™ncia arrecadat√≥ria
        eficiencia_arrecadacao = (total_arrecadado_receitas / total_loa_receitas * 100) if total_loa_receitas > 0 else 0
        cor_eficiencia = "normal" if eficiencia_arrecadacao >= 90 else "inverse"
        st.metric(
            "üìà Efici√™ncia Arrecada√ß√£o",
            f"{eficiencia_arrecadacao:.1f}%",
            "Real vs Planejado (LOA)",
            delta_color=cor_eficiencia,
            help="Capacidade de cumprir metas de receita"
        )
    
    with col2:
        # Concentra√ß√£o de fornecedores
        total_fornecedores = despesas_df['Nome Fornecedor'].nunique()
        fornecedor_concentracao = despesas_df.groupby('Nome Fornecedor')['Empenhado at√© Hoje'].sum()
        top5_fornecedores = fornecedor_concentracao.nlargest(5).sum()
        concentracao_pct = (top5_fornecedores / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
        
        st.metric(
            "üè¢ Concentra√ß√£o Fornecedores",
            f"{concentracao_pct:.1f}%",
            f"Top 5 de {total_fornecedores} fornecedores",
            help="Percentual gasto com os 5 maiores fornecedores"
        )
    
    with col3:
        # Diversifica√ß√£o de receitas
        receitas_por_categoria = receitas_df.groupby(receitas_df['C√≥digo'].str[:4])['Arrec. Total'].sum()
        
        # Calcular √≠ndice de diversifica√ß√£o (entropia normalizada)
        if len(receitas_por_categoria) > 0:
            valores_norm = receitas_por_categoria.values / receitas_por_categoria.sum()
            # Evitar log(0) adicionando pequeno valor
            valores_norm = valores_norm + 1e-10
            diversificacao = entropy(valores_norm) / np.log(len(valores_norm)) * 100
        else:
            diversificacao = 0
        
        st.metric(
            "üéØ Diversifica√ß√£o Receitas",
            f"{diversificacao:.1f}%",
            "√çndice de Diversifica√ß√£o",
            help="Diversifica√ß√£o das fontes de receita (0-100%)"
        )
    
    with col4:
        # Tempo m√©dio de pagamento (aproximado)
        if 'Data' in despesas_df.columns:
            despesas_com_data = despesas_df.dropna(subset=['Data'])
            if not despesas_com_data.empty:
                tempo_medio = (datetime.now() - despesas_com_data['Data'].min()).days
                st.metric(
                    "‚è±Ô∏è Tempo M√©dio Ciclo",
                    f"{tempo_medio} dias",
                    "Empenho at√© hoje",
                    help="Tempo m√©dio do ciclo or√ßament√°rio"
                )
            else:
                st.metric("‚è±Ô∏è Tempo M√©dio Ciclo", "N/A", "Dados indispon√≠veis")
        else:
            st.metric("‚è±Ô∏è Tempo M√©dio Ciclo", "N/A", "Dados indispon√≠veis")
    
    # ==============================================================================
    # SE√á√ÉO 7: M√âTRICAS COMPARATIVAS E BENCHMARKS
    # ==============================================================================
    st.subheader("üìä 7. M√©tricas Comparativas e Benchmarks")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # √çndice de Qualidade Fiscal (IQF) - criado
        iqf = (autonomia_fiscal * 0.3 + execucao_vs_loa * 0.3 + 
               (100 - dependencia_transferencias) * 0.2 + liquidez_geral * 20 * 0.2)
        iqf = min(100, max(0, iqf))
        
        cor_iqf = "normal" if iqf >= 70 else ("inverse" if iqf < 50 else "off")
        st.metric(
            "üèÜ √çndice Qualidade Fiscal",
            f"{iqf:.0f}/100",
            "IQF Composto",
            delta_color=cor_iqf,
            help="√çndice composto: autonomia + execu√ß√£o + liquidez"
        )
    
    with col2:
        # Sustentabilidade fiscal
        sustentabilidade = ((saude_percentual >= 15) * 25 + 
                          (educacao_percentual >= 25) * 25 + 
                          (autonomia_fiscal >= 20) * 25 + 
                          (execucao_vs_loa >= 80) * 25)
        
        st.metric(
            "üå± Sustentabilidade",
            f"{sustentabilidade:.0f}/100",
            "Score Constitucional",
            help="Cumprimento de limites constitucionais"
        )
    
    with col3:
        # Transpar√™ncia e controle
        total_empenhos = len(despesas_df)
        empenhos_por_habitante = total_empenhos / pop_estimada
        
        st.metric(
            "üîç Transpar√™ncia",
            f"{total_empenhos:,}",
            f"{empenhos_por_habitante:.1f} empenhos/hab",
            help="N√∫mero total de empenhos registrados"
        )
    
    with col4:
        # Efetividade do gasto p√∫blico
        gasto_social = saude_despesas + educacao_despesas + assistencia_despesas
        efetividade = (gasto_social / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
        
        cor_efetividade = "normal" if efetividade >= 50 else "inverse"
        st.metric(
            "üéØ Efetividade Social",
            f"{efetividade:.1f}%",
            "Gasto Social / Total",
            delta_color=cor_efetividade,
            help="Percentual gasto em √°reas sociais priorit√°rias"
        )
    
    # ==============================================================================
    # SE√á√ÉO 8: DASHBOARD DE ALERTAS E RECOMENDA√á√ïES
    # ==============================================================================
    st.subheader("‚ö†Ô∏è 8. Alertas e Recomenda√ß√µes")
    
    alertas = []
    recomendacoes = []
    
    # Verificar limites constitucionais
    if saude_percentual < 15:
        alertas.append(f"üö® **SA√öDE**: {saude_percentual:.1f}% - Abaixo do m√≠nimo constitucional (15%)")
        recomendacoes.append("üìå Aumentar investimentos em sa√∫de para cumprir limite constitucional")
    
    if educacao_percentual < 25:
        alertas.append(f"üö® **EDUCA√á√ÉO**: {educacao_percentual:.1f}% - Abaixo do m√≠nimo constitucional (25%)")
        recomendacoes.append("üìå Ampliar gastos com educa√ß√£o conforme determina√ß√£o constitucional")
    
    # Verificar autonomia fiscal
    if autonomia_fiscal < 20:
        alertas.append(f"‚ö†Ô∏è **AUTONOMIA FISCAL**: {autonomia_fiscal:.1f}% - Muito dependente de transfer√™ncias")
        recomendacoes.append("üìå Fortalecer arrecada√ß√£o pr√≥pria (IPTU, ISS, taxas)")
    
    # Verificar execu√ß√£o or√ßament√°ria
    if execucao_vs_loa < 70:
        alertas.append(f"‚ö†Ô∏è **EXECU√á√ÉO LOA**: {execucao_vs_loa:.1f}% - Baixa execu√ß√£o do or√ßamento")
        recomendacoes.append("üìå Revisar proje√ß√µes or√ßament√°rias e melhorar arrecada√ß√£o")
    
    # Verificar liquidez
    if liquidez_geral < 1.0:
        alertas.append(f"üö® **LIQUIDEZ**: {liquidez_geral:.2f} - Insuficiente para cobrir gastos")
        recomendacoes.append("üìå Urgente: equilibrar receitas e despesas")
    
    # Verificar resto a pagar
    if resto_a_pagar > total_arrecadado_receitas * 0.1:  # > 10% da receita
        alertas.append(f"‚ö†Ô∏è **RESTO A PAGAR**: {format_currency(resto_a_pagar)} - Alto valor n√£o pago")
        recomendacoes.append("üìå Priorizar quita√ß√£o de compromissos liquidados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if alertas:
            st.error("üö® **ALERTAS CR√çTICOS**")
            for alerta in alertas:
                st.write(alerta)
        else:
            st.success("‚úÖ **SITUA√á√ÉO FISCAL REGULAR** - Sem alertas cr√≠ticos")
    
    with col2:
        if recomendacoes:
            st.info("üí° **RECOMENDA√á√ïES**")
            for rec in recomendacoes:
                st.write(rec)
        else:
            st.success("üéØ **GEST√ÉO ADEQUADA** - Continue monitorando os indicadores")

# ==============================================================================
# LOA vs EXECU√á√ÉO
# ==============================================================================
elif opcao == "LOA vs Execu√ß√£o":
    st.header("üìä Compara√ß√£o: LOA (Or√ßamento) vs Execu√ß√£o Real")
    
    # M√©tricas principais de compara√ß√£o
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üí∞ LOA - Receitas",
            format_currency(total_loa_receitas),
            "Or√ßamento Original"
        )
    
    with col2:
        st.metric(
            "üìà Receitas Arrecadadas",
            format_currency(total_arrecadado_receitas),
            f"{execucao_vs_loa:.1f}% da LOA"
        )
    
    with col3:
        diferenca_loa_execucao = total_arrecadado_receitas - total_loa_receitas
        st.metric(
            "üîÑ Diferen√ßa",
            format_currency(diferenca_loa_execucao),
            "Arrecadado vs LOA"
        )
    
    with col4:
        st.metric(
            "üìä Performance",
            f"{execucao_vs_loa:.1f}%",
            "Execu√ß√£o da LOA"
        )
    
    st.divider()
    
    # An√°lise por categoria LOA vs Execu√ß√£o
    st.subheader("üìà An√°lise Detalhada por Categoria")
    
    # Agrupar receitas da LOA por categoria principal
    receitas_loa_df['categoria_loa'] = receitas_loa_df['CODRE'].str[:4]
    loa_por_categoria = receitas_loa_df.groupby('categoria_loa')['TOTOR'].sum().reset_index()
    
    # Agrupar receitas executadas por categoria
    receitas_df['categoria_exec'] = receitas_df['C√≥digo'].str[:4]
    exec_por_categoria = receitas_df.groupby('categoria_exec')['Arrec. Total'].sum().reset_index()
    
    # Merge das categorias
    comparacao_categorias = pd.merge(
        loa_por_categoria, 
        exec_por_categoria, 
        left_on='categoria_loa', 
        right_on='categoria_exec', 
        how='outer'
    ).fillna(0)
    
    comparacao_categorias['execucao_pct'] = (
        comparacao_categorias['Arrec. Total'] / comparacao_categorias['TOTOR'] * 100
    ).fillna(0)
    
    # Mapear nomes das categorias
    categoria_nomes = {
        '1112': 'Impostos s/ Patrim√¥nio', '1113': 'Impostos s/ Renda', '1114': 'Impostos s/ Servi√ßos',
        '1121': 'Taxas Poder Pol√≠cia', '1122': 'Taxas por Servi√ßos', '1321': 'Rendimentos Financeiros',
        '1335': 'Concess√µes', '1399': 'Outras Patrimoniais', '1699': 'Outros Servi√ßos',
        '1711': 'Transfer√™ncias Uni√£o', '1712': 'Compensa√ß√µes Financeiras', '1713': 'SUS - Uni√£o',
        '1714': 'FNDE', '1715': 'FUNDEB - Uni√£o', '1716': 'FNAS', '1719': 'Outras - Uni√£o',
        '1721': 'Transfer√™ncias Estado', '1722': 'Royalties Estado', '1723': 'SUS - Estado',
        '1724': 'Conv√™nios Estado', '1729': 'Outras - Estado', '1751': 'FUNDEB',
        '1911': 'Multas', '1922': 'Restitui√ß√µes', '1999': 'Outras Correntes', '2422': 'Transfer√™ncias Capital'
    }
    
    comparacao_categorias['nome_categoria'] = comparacao_categorias['categoria_loa'].map(categoria_nomes)
    comparacao_categorias = comparacao_categorias.dropna(subset=['nome_categoria'])
    comparacao_categorias = comparacao_categorias[comparacao_categorias['TOTOR'] > 0]
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico comparativo LOA vs Execu√ß√£o
        fig_comparacao_loa = go.Figure()
        
        fig_comparacao_loa.add_trace(go.Bar(
            name='LOA (Previsto)',
            x=comparacao_categorias['nome_categoria'],
            y=comparacao_categorias['TOTOR'],
            marker_color='lightcoral',
            opacity=0.7
        ))
        
        fig_comparacao_loa.add_trace(go.Bar(
            name='Executado',
            x=comparacao_categorias['nome_categoria'],
            y=comparacao_categorias['Arrec. Total'],
            marker_color='steelblue'
        ))
        
        fig_comparacao_loa.update_layout(
            title="LOA vs Execu√ß√£o por Categoria",
            barmode='group',
            height=500,
            xaxis_tickangle=-45
        )
        
        st.plotly_chart(fig_comparacao_loa, use_container_width=True)
    
    with col2:
        # Percentual de execu√ß√£o por categoria
        top_execucao = comparacao_categorias.nlargest(10, 'execucao_pct')
        
        fig_exec_pct = px.bar(
            top_execucao,
            x='execucao_pct',
            y='nome_categoria',
            orientation='h',
            title="% Execu√ß√£o da LOA por Categoria",
            labels={'execucao_pct': 'Execu√ß√£o (%)', 'nome_categoria': 'Categoria'},
            color='execucao_pct',
            color_continuous_scale='RdYlGn'
        )
        
        fig_exec_pct.update_layout(height=500, yaxis={'categoryorder': 'total ascending'})
        st.plotly_chart(fig_exec_pct, use_container_width=True)
    
    # Tabela detalhada de compara√ß√£o
    st.subheader("üìã Tabela Comparativa: LOA vs Execu√ß√£o")
    
    tabela_comparacao = comparacao_categorias[['nome_categoria', 'TOTOR', 'Arrec. Total', 'execucao_pct']].copy()
    tabela_comparacao['diferenca'] = tabela_comparacao['Arrec. Total'] - tabela_comparacao['TOTOR']
    
    # Ordenar por valor da LOA
    tabela_comparacao = tabela_comparacao.sort_values('TOTOR', ascending=False)
    
    # Formatar valores
    tabela_comparacao['TOTOR'] = tabela_comparacao['TOTOR'].apply(format_currency)
    tabela_comparacao['Arrec. Total'] = tabela_comparacao['Arrec. Total'].apply(format_currency)
    tabela_comparacao['diferenca'] = tabela_comparacao['diferenca'].apply(format_currency)
    tabela_comparacao['execucao_pct'] = tabela_comparacao['execucao_pct'].round(1).astype(str) + '%'
    
    tabela_comparacao.columns = ['Categoria', 'LOA (Previsto)', 'Executado', '% Execu√ß√£o', 'Diferen√ßa']
    st.dataframe(tabela_comparacao, use_container_width=True)
    
    # Insights da compara√ß√£o
    st.subheader("üí° Insights LOA vs Execu√ß√£o")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Categorias com melhor execu√ß√£o
        melhor_execucao = comparacao_categorias[comparacao_categorias['execucao_pct'] > 100]
        if not melhor_execucao.empty:
            categoria_destaque = melhor_execucao.loc[melhor_execucao['execucao_pct'].idxmax()]
            st.success(f"üéØ **Melhor Performance**: {categoria_destaque['nome_categoria']} - {categoria_destaque['execucao_pct']:.1f}%")
        else:
            st.info("‚ÑπÔ∏è Nenhuma categoria superou 100% da previs√£o LOA")
    
    with col2:
        # Categorias com pior execu√ß√£o
        pior_execucao = comparacao_categorias[comparacao_categorias['execucao_pct'] < 50]
        if not pior_execucao.empty:
            categoria_atencao = pior_execucao.loc[pior_execucao['execucao_pct'].idxmin()]
            st.warning(f"‚ö†Ô∏è **Aten√ß√£o**: {categoria_atencao['nome_categoria']} - {categoria_atencao['execucao_pct']:.1f}%")
        else:
            st.success("‚úÖ Todas as categorias com execu√ß√£o > 50%")
    
    with col3:
        # Execu√ß√£o geral
        if execucao_vs_loa > 90:
            st.success(f"üü¢ **Execu√ß√£o Geral**: {execucao_vs_loa:.1f}% - Excelente")
        elif execucao_vs_loa > 70:
            st.info(f"üü° **Execu√ß√£o Geral**: {execucao_vs_loa:.1f}% - Boa")
        else:
            st.error(f"üî¥ **Execu√ß√£o Geral**: {execucao_vs_loa:.1f}% - Baixa")

# ==============================================================================
# RECEITAS EXECUTADAS
# ==============================================================================
elif opcao == "Receitas Executadas":
    st.header("üí∞ An√°lise das Receitas Executadas")
    
    # Filtrar receitas com arrecada√ß√£o > 0
    receitas_com_valor = receitas_df[receitas_df['Arrec. Total'] > 0].copy()
    
    # Principais categorias de receitas
    receitas_com_valor['categoria'] = receitas_com_valor['C√≥digo'].str[:4]
    receitas_por_categoria = receitas_com_valor.groupby('categoria').agg({
        'Prev. Atualizada': 'sum',
        'Arrec. Total': 'sum'
    }).reset_index()
    
    receitas_por_categoria['execucao_pct'] = (receitas_por_categoria['Arrec. Total'] / 
                                            receitas_por_categoria['Prev. Atualizada'] * 100)
    
    # Mapear c√≥digos para nomes
    categoria_nomes = {
        '1112': 'Impostos s/ Patrim√¥nio',
        '1113': 'Impostos s/ Renda',
        '1114': 'Impostos s/ Servi√ßos',
        '1121': 'Taxas Poder Pol√≠cia',
        '1122': 'Taxas por Servi√ßos',
        '1321': 'Rendimentos Financeiros',
        '1335': 'Concess√µes',
        '1399': 'Outras Patrimoniais',
        '1699': 'Outros Servi√ßos',
        '1711': 'Transfer√™ncias Uni√£o',
        '1712': 'Compensa√ß√µes Financeiras',
        '1713': 'SUS - Uni√£o',
        '1714': 'FNDE',
        '1715': 'FUNDEB - Uni√£o',
        '1716': 'FNAS',
        '1719': 'Outras - Uni√£o',
        '1721': 'Transfer√™ncias Estado',
        '1722': 'Royalties Estado',
        '1723': 'SUS - Estado',
        '1724': 'Conv√™nios Estado',
        '1729': 'Outras - Estado',
        '1751': 'FUNDEB',
        '1911': 'Multas',
        '1922': 'Restitui√ß√µes',
        '1999': 'Outras Correntes',
        '2422': 'Transfer√™ncias Capital'
    }
    
    receitas_por_categoria['nome_categoria'] = receitas_por_categoria['categoria'].map(categoria_nomes)
    receitas_por_categoria['nome_categoria'] = receitas_por_categoria['nome_categoria'].fillna(
        'Outras - ' + receitas_por_categoria['categoria'])
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Top 10 receitas por arrecada√ß√£o
        top_receitas = receitas_por_categoria.nlargest(10, 'Arrec. Total')
        
        fig_bar = px.bar(
            top_receitas,
            x='Arrec. Total',
            y='nome_categoria',
            orientation='h',
            title="Top 10 Categorias - Arrecada√ß√£o Realizada",
            labels={'Arrec. Total': 'Arrecadado (R$)', 'nome_categoria': 'Categoria'}
        )
        
        fig_bar.update_layout(height=400, yaxis={'categoryorder': 'total ascending'})
        st.plotly_chart(fig_bar, use_container_width=True)
    
    with col2:
        # Percentual de execu√ß√£o por categoria
        receitas_execucao = receitas_por_categoria[receitas_por_categoria['execucao_pct'] > 0]
        
        fig_execucao = px.bar(
            receitas_execucao.nlargest(10, 'execucao_pct'),
            x='execucao_pct',
            y='nome_categoria',
            orientation='h',
            title="Top 10 - Percentual de Execu√ß√£o das Receitas",
            labels={'execucao_pct': 'Execu√ß√£o (%)', 'nome_categoria': 'Categoria'},
            color='execucao_pct',
            color_continuous_scale='RdYlGn'
        )
        
        fig_execucao.update_layout(height=400, yaxis={'categoryorder': 'total ascending'})
        st.plotly_chart(fig_execucao, use_container_width=True)
    
    # Tabela detalhada das principais receitas
    st.subheader("üìã Detalhamento das Principais Receitas Arrecadadas")
    
    principais_receitas = receitas_com_valor.nlargest(20, 'Arrec. Total')[
        ['Especifica√ß√£o', 'Prev. Atualizada', 'Arrec. Total']
    ].copy()
    
    principais_receitas['Execu√ß√£o (%)'] = (principais_receitas['Arrec. Total'] / 
                                         principais_receitas['Prev. Atualizada'] * 100)
    
    principais_receitas['Prev. Atualizada'] = principais_receitas['Prev. Atualizada'].apply(format_currency)
    principais_receitas['Arrec. Total'] = principais_receitas['Arrec. Total'].apply(format_currency)
    principais_receitas['Execu√ß√£o (%)'] = principais_receitas['Execu√ß√£o (%)'].round(1).astype(str) + '%'
    
    principais_receitas.columns = ['Descri√ß√£o', 'Previsto', 'Arrecadado', 'Execu√ß√£o (%)']
    st.dataframe(principais_receitas, use_container_width=True)

# ==============================================================================
# DESPESAS EXECUTADAS
# ==============================================================================
elif opcao == "Despesas Executadas":
    st.header("üí≥ An√°lise das Despesas Executadas")
    
    # An√°lise por fun√ß√£o
    despesas_por_funcao = despesas_df.groupby(['Fun√ß√£o', 'Nome da Fun√ß√£o']).agg({
        'Dota√ß√£o Atual': 'sum',
        'Empenhado at√© Hoje': 'sum',
        'Liquidado at√© Hoje': 'sum',
        'Pago at√© Hoje': 'sum'
    }).reset_index()
    
    despesas_por_funcao['execucao_pct'] = (despesas_por_funcao['Empenhado at√© Hoje'] / 
                                         despesas_por_funcao['Dota√ß√£o Atual'] * 100)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Top 10 fun√ß√µes por valor empenhado
        top_funcoes = despesas_por_funcao.nlargest(10, 'Empenhado at√© Hoje')
        
        fig_funcoes = px.bar(
            top_funcoes,
            x='Empenhado at√© Hoje',
            y='Nome da Fun√ß√£o',
            orientation='h',
            title="Top 10 Fun√ß√µes - Valor Empenhado",
            labels={'Empenhado at√© Hoje': 'Empenhado (R$)', 'Nome da Fun√ß√£o': 'Fun√ß√£o'}
        )
        
        fig_funcoes.update_layout(height=400, yaxis={'categoryorder': 'total ascending'})
        st.plotly_chart(fig_funcoes, use_container_width=True)
    
    with col2:
        # An√°lise por natureza da despesa
        despesas_por_natureza = despesas_df.groupby('Nome Natureza').agg({
            'Empenhado at√© Hoje': 'sum'
        }).reset_index()
        
        top_natureza = despesas_por_natureza.nlargest(8, 'Empenhado at√© Hoje')
        
        fig_natureza = px.pie(
            top_natureza,
            values='Empenhado at√© Hoje',
            names='Nome Natureza',
            title="Distribui√ß√£o por Natureza da Despesa"
        )
        
        st.plotly_chart(fig_natureza, use_container_width=True)
    
    # Evolu√ß√£o temporal das despesas
    st.subheader("üìà Evolu√ß√£o Temporal das Despesas")
    
    if 'Data' in despesas_df.columns:
        despesas_df['mes_ano'] = despesas_df['Data'].dt.to_period('M')
        evolucao_mensal = despesas_df.groupby('mes_ano')['Valor Empenhado'].sum().reset_index()
        evolucao_mensal['mes_ano_str'] = evolucao_mensal['mes_ano'].astype(str)
        
        fig_evolucao = px.line(
            evolucao_mensal,
            x='mes_ano_str',
            y='Valor Empenhado',
            title="Evolu√ß√£o Mensal dos Empenhos",
            labels={'mes_ano_str': 'M√™s/Ano', 'Valor Empenhado': 'Valor (R$)'}
        )
        
        st.plotly_chart(fig_evolucao, use_container_width=True)
    
    # Tabela dos maiores fornecedores
    st.subheader("üè¢ Maiores Fornecedores")
    
    fornecedores = despesas_df.groupby('Nome Fornecedor').agg({
        'Empenhado at√© Hoje': 'sum',
        'Liquidado at√© Hoje': 'sum',
        'Pago at√© Hoje': 'sum'
    }).reset_index()
    
    top_fornecedores = fornecedores.nlargest(15, 'Empenhado at√© Hoje')
    
    top_fornecedores['Empenhado at√© Hoje'] = top_fornecedores['Empenhado at√© Hoje'].apply(format_currency)
    top_fornecedores['Liquidado at√© Hoje'] = top_fornecedores['Liquidado at√© Hoje'].apply(format_currency)
    top_fornecedores['Pago at√© Hoje'] = top_fornecedores['Pago at√© Hoje'].apply(format_currency)
    
    top_fornecedores.columns = ['Fornecedor', 'Empenhado', 'Liquidado', 'Pago']
    st.dataframe(top_fornecedores, use_container_width=True)

# ==============================================================================
# COMPARA√á√ÉO PREVISTO VS REALIZADO
# ==============================================================================
elif opcao == "Compara√ß√£o Previsto vs Realizado":
    st.header("üìä Compara√ß√£o: Previsto vs Realizado")
    
    # An√°lise de receitas
    st.subheader("üí∞ Receitas: Previs√£o vs Arrecada√ß√£o")
    
    # Principais categorias de receitas
    receitas_categoria = receitas_df.groupby(receitas_df['C√≥digo'].str[:4]).agg({
        'Prev. Atualizada': 'sum',
        'Arrec. Total': 'sum'
    }).reset_index()
    
    receitas_categoria['diferenca'] = receitas_categoria['Arrec. Total'] - receitas_categoria['Prev. Atualizada']
    receitas_categoria['execucao_pct'] = (receitas_categoria['Arrec. Total'] / 
                                        receitas_categoria['Prev. Atualizada'] * 100)
    
    # Mapear nomes das categorias
    categoria_nomes = {
        '1112': 'Impostos s/ Patrim√¥nio', '1113': 'Impostos s/ Renda', '1114': 'Impostos s/ Servi√ßos',
        '1121': 'Taxas Poder Pol√≠cia', '1122': 'Taxas por Servi√ßos', '1321': 'Rendimentos Financeiros',
        '1335': 'Concess√µes', '1399': 'Outras Patrimoniais', '1699': 'Outros Servi√ßos',
        '1711': 'Transfer√™ncias Uni√£o', '1712': 'Compensa√ß√µes Financeiras', '1713': 'SUS - Uni√£o',
        '1714': 'FNDE', '1715': 'FUNDEB - Uni√£o', '1716': 'FNAS', '1719': 'Outras - Uni√£o',
        '1721': 'Transfer√™ncias Estado', '1722': 'Royalties Estado', '1723': 'SUS - Estado',
        '1724': 'Conv√™nios Estado', '1729': 'Outras - Estado', '1751': 'FUNDEB',
        '1911': 'Multas', '1922': 'Restitui√ß√µes', '1999': 'Outras Correntes', '2422': 'Transfer√™ncias Capital'
    }
    
    receitas_categoria['nome'] = receitas_categoria['C√≥digo'].map(categoria_nomes)
    receitas_categoria = receitas_categoria.dropna(subset=['nome'])
    
    # Gr√°fico de compara√ß√£o
    fig_comparacao_receitas = go.Figure()
    
    fig_comparacao_receitas.add_trace(go.Bar(
        name='Previsto',
        x=receitas_categoria['nome'],
        y=receitas_categoria['Prev. Atualizada'],
        marker_color='lightblue'
    ))
    
    fig_comparacao_receitas.add_trace(go.Bar(
        name='Arrecadado',
        x=receitas_categoria['nome'],
        y=receitas_categoria['Arrec. Total'],
        marker_color='darkblue'
    ))
    
    fig_comparacao_receitas.update_layout(
        title="Receitas: Previsto vs Arrecadado por Categoria",
        barmode='group',
        height=500,
        xaxis_tickangle=-45
    )
    
    st.plotly_chart(fig_comparacao_receitas, use_container_width=True)
    
    # Tabela de compara√ß√£o
    st.subheader("üìã An√°lise Detalhada por Categoria")
    
    comparacao_receitas = receitas_categoria[['nome', 'Prev. Atualizada', 'Arrec. Total', 'diferenca', 'execucao_pct']].copy()
    comparacao_receitas = comparacao_receitas.sort_values('execucao_pct', ascending=False)
    
    comparacao_receitas['Prev. Atualizada'] = comparacao_receitas['Prev. Atualizada'].apply(format_currency)
    comparacao_receitas['Arrec. Total'] = comparacao_receitas['Arrec. Total'].apply(format_currency)
    comparacao_receitas['diferenca'] = comparacao_receitas['diferenca'].apply(format_currency)
    comparacao_receitas['execucao_pct'] = comparacao_receitas['execucao_pct'].round(1).astype(str) + '%'
    
    comparacao_receitas.columns = ['Categoria', 'Previsto', 'Arrecadado', 'Diferen√ßa', 'Execu√ß√£o (%)']
    st.dataframe(comparacao_receitas, use_container_width=True)

# ==============================================================================
# AN√ÅLISE POR FUN√á√ÉO
# ==============================================================================
elif opcao == "An√°lise por Fun√ß√£o":
    st.header("üèõÔ∏è An√°lise das Despesas por Fun√ß√£o de Governo")
    
    # An√°lise detalhada por fun√ß√£o
    funcoes_detalhadas = despesas_df.groupby(['Fun√ß√£o', 'Nome da Fun√ß√£o']).agg({
        'Dota√ß√£o Atual': 'sum',
        'Empenhado at√© Hoje': 'sum',
        'Liquidado at√© Hoje': 'sum',
        'Pago at√© Hoje': 'sum'
    }).reset_index()
    
    funcoes_detalhadas['execucao_orcamentaria'] = (funcoes_detalhadas['Empenhado at√© Hoje'] / 
                                                 funcoes_detalhadas['Dota√ß√£o Atual'] * 100)
    funcoes_detalhadas['execucao_financeira'] = (funcoes_detalhadas['Pago at√© Hoje'] / 
                                               funcoes_detalhadas['Empenhado at√© Hoje'] * 100)
    
    # Filtrar fun√ß√µes com valores significativos
    funcoes_principais = funcoes_detalhadas[funcoes_detalhadas['Empenhado at√© Hoje'] > 10000].copy()
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Execu√ß√£o or√ßament√°ria por fun√ß√£o
        fig_exec_orc = px.bar(
            funcoes_principais.sort_values('execucao_orcamentaria', ascending=True).tail(10),
            x='execucao_orcamentaria',
            y='Nome da Fun√ß√£o',
            orientation='h',
            title="Execu√ß√£o Or√ßament√°ria por Fun√ß√£o (%)",
            labels={'execucao_orcamentaria': 'Execu√ß√£o (%)', 'Nome da Fun√ß√£o': 'Fun√ß√£o'},
            color='execucao_orcamentaria',
            color_continuous_scale='RdYlGn'
        )
        
        st.plotly_chart(fig_exec_orc, use_container_width=True)
    
    with col2:
        # Execu√ß√£o financeira por fun√ß√£o
        fig_exec_fin = px.bar(
            funcoes_principais.sort_values('execucao_financeira', ascending=True).tail(10),
            x='execucao_financeira',
            y='Nome da Fun√ß√£o',
            orientation='h',
            title="Execu√ß√£o Financeira por Fun√ß√£o (%)",
            labels={'execucao_financeira': 'Pagamento (%)', 'Nome da Fun√ß√£o': 'Fun√ß√£o'},
            color='execucao_financeira',
            color_continuous_scale='Blues'
        )
        
        st.plotly_chart(fig_exec_fin, use_container_width=True)
    
    # An√°lise dos principais gastos por fun√ß√£o
    st.subheader("üí∞ Maiores Gastos por √Årea")
    
    # Selecionar fun√ß√£o para an√°lise detalhada
    funcao_selecionada = st.selectbox(
        "Selecione uma fun√ß√£o para an√°lise detalhada:",
        options=funcoes_principais.sort_values('Empenhado at√© Hoje', ascending=False)['Nome da Fun√ß√£o'].tolist()
    )
    
    if funcao_selecionada:
        # Filtrar despesas da fun√ß√£o selecionada
        despesas_funcao = despesas_df[despesas_df['Nome da Fun√ß√£o'] == funcao_selecionada]
        
        # An√°lise por subfun√ß√£o
        subfuncoes = despesas_funcao.groupby(['Subfun√ß√£o', 'Nome da Subfun√ß√£o']).agg({
            'Empenhado at√© Hoje': 'sum',
            'Liquidado at√© Hoje': 'sum',
            'Pago at√© Hoje': 'sum'
        }).reset_index()
        
        if not subfuncoes.empty:
            col1, col2 = st.columns(2)
            
            with col1:
                # Distribui√ß√£o por subfun√ß√£o
                fig_subfuncao = px.pie(
                    subfuncoes,
                    values='Empenhado at√© Hoje',
                    names='Nome da Subfun√ß√£o',
                    title=f"Distribui√ß√£o de Gastos - {funcao_selecionada}"
                )
                st.plotly_chart(fig_subfuncao, use_container_width=True)
            
            with col2:
                # Principais fornecedores da fun√ß√£o
                fornecedores_funcao = despesas_funcao.groupby('Nome Fornecedor')['Empenhado at√© Hoje'].sum().reset_index()
                top_fornecedores = fornecedores_funcao.nlargest(8, 'Empenhado at√© Hoje')
                
                fig_fornecedores = px.bar(
                    top_fornecedores,
                    x='Empenhado at√© Hoje',
                    y='Nome Fornecedor',
                    orientation='h',
                    title=f"Principais Fornecedores - {funcao_selecionada}",
                    labels={'Empenhado at√© Hoje': 'Valor (R$)', 'Nome Fornecedor': 'Fornecedor'}
                )
                
                fig_fornecedores.update_layout(yaxis={'categoryorder': 'total ascending'})
                st.plotly_chart(fig_fornecedores, use_container_width=True)
    
    # Tabela resumo de todas as fun√ß√µes
    st.subheader("üìä Resumo por Fun√ß√£o de Governo")
    
    resumo_funcoes = funcoes_detalhadas.copy()
    resumo_funcoes['Dota√ß√£o Atual'] = resumo_funcoes['Dota√ß√£o Atual'].apply(format_currency)
    resumo_funcoes['Empenhado at√© Hoje'] = resumo_funcoes['Empenhado at√© Hoje'].apply(format_currency)
    resumo_funcoes['Liquidado at√© Hoje'] = resumo_funcoes['Liquidado at√© Hoje'].apply(format_currency)
    resumo_funcoes['Pago at√© Hoje'] = resumo_funcoes['Pago at√© Hoje'].apply(format_currency)
    resumo_funcoes['execucao_orcamentaria'] = resumo_funcoes['execucao_orcamentaria'].round(1).astype(str) + '%'
    resumo_funcoes['execucao_financeira'] = resumo_funcoes['execucao_financeira'].round(1).astype(str) + '%'
    
    resumo_funcoes.columns = ['C√≥digo', 'Fun√ß√£o', 'Dota√ß√£o', 'Empenhado', 'Liquidado', 'Pago', 'Exec. Or√ß. (%)', 'Exec. Fin. (%)']
    st.dataframe(resumo_funcoes, use_container_width=True)

# ==============================================================================
# DETALHAMENTO
# ==============================================================================
elif opcao == "Detalhamento":
    st.header("üîç Detalhamento Completo")
    
    # Tabs para receitas e despesas
    tab1, tab2 = st.tabs(["üìà Receitas Detalhadas", "üìâ Despesas Detalhadas"])
    
    with tab1:
        st.subheader("Receitas - Busca e Filtros")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            valor_min_rec = st.number_input("Arrecada√ß√£o m√≠nima (R$)", min_value=0.0, value=0.0, key="rec_min")
        
        with col2:
            busca_rec = st.text_input("Buscar por descri√ß√£o", key="busca_rec")
        
        with col3:
            apenas_com_arrecadacao = st.checkbox("Apenas com arrecada√ß√£o", value=True)
        
        # Aplicar filtros √†s receitas
        receitas_filtradas = receitas_df.copy()
        
        if valor_min_rec > 0:
            receitas_filtradas = receitas_filtradas[receitas_filtradas['Arrec. Total'] >= valor_min_rec]
        
        if busca_rec:
            receitas_filtradas = receitas_filtradas[
                receitas_filtradas['Especifica√ß√£o'].str.contains(busca_rec, case=False, na=False)
            ]
        
        if apenas_com_arrecadacao:
            receitas_filtradas = receitas_filtradas[receitas_filtradas['Arrec. Total'] > 0]
        
        # Mostrar resultados das receitas
        st.write(f"**üìä Resultados: {len(receitas_filtradas)} receitas encontradas**")
        
        if not receitas_filtradas.empty:
            display_receitas = receitas_filtradas[['C√≥digo', 'Especifica√ß√£o', 'Prev. Atualizada', 'Arrec. Total']].copy()
            display_receitas['Execu√ß√£o (%)'] = (display_receitas['Arrec. Total'] / 
                                              display_receitas['Prev. Atualizada'] * 100).round(1)
            
            display_receitas['Prev. Atualizada'] = display_receitas['Prev. Atualizada'].apply(format_currency)
            display_receitas['Arrec. Total'] = display_receitas['Arrec. Total'].apply(format_currency)
            display_receitas['Execu√ß√£o (%)'] = display_receitas['Execu√ß√£o (%)'].astype(str) + '%'
            
            display_receitas.columns = ['C√≥digo', 'Descri√ß√£o', 'Previsto', 'Arrecadado', 'Execu√ß√£o (%)']
            st.dataframe(display_receitas, use_container_width=True)
            
            # Estat√≠sticas das receitas filtradas
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total Filtrado", format_currency(receitas_filtradas['Arrec. Total'].sum()))
            with col2:
                st.metric("Maior Arrecada√ß√£o", format_currency(receitas_filtradas['Arrec. Total'].max()))
            with col3:
                execucao_media = (receitas_filtradas['Arrec. Total'].sum() / 
                                receitas_filtradas['Prev. Atualizada'].sum() * 100)
                st.metric("Execu√ß√£o M√©dia", f"{execucao_media:.1f}%")
    
    with tab2:
        st.subheader("Despesas - Busca e Filtros")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            valor_min_desp = st.number_input("Valor m√≠nimo (R$)", min_value=0.0, value=0.0, key="desp_min")
        
        with col2:
            funcao_filtro = st.selectbox(
                "Filtrar por fun√ß√£o",
                options=['Todas'] + sorted(despesas_df['Nome da Fun√ß√£o'].dropna().unique().tolist()),
                key="funcao_filtro"
            )
        
        with col3:
            fornecedor_filtro = st.text_input("Buscar fornecedor", key="fornecedor_filtro")
        
        with col4:
            periodo_inicio = st.date_input("Data in√≠cio", value=None, key="data_inicio")
        
        # Aplicar filtros √†s despesas
        despesas_filtradas = despesas_df.copy()
        
        if valor_min_desp > 0:
            despesas_filtradas = despesas_filtradas[despesas_filtradas['Empenhado at√© Hoje'] >= valor_min_desp]
        
        if funcao_filtro and funcao_filtro != 'Todas':
            despesas_filtradas = despesas_filtradas[despesas_filtradas['Nome da Fun√ß√£o'] == funcao_filtro]
        
        if fornecedor_filtro:
            despesas_filtradas = despesas_filtradas[
                despesas_filtradas['Nome Fornecedor'].str.contains(fornecedor_filtro, case=False, na=False)
            ]
        
        if periodo_inicio:
            despesas_filtradas = despesas_filtradas[despesas_filtradas['Data'] >= pd.Timestamp(periodo_inicio)]
        
        # Mostrar resultados das despesas
        st.write(f"**üìä Resultados: {len(despesas_filtradas)} empenhos encontrados**")
        
        if not despesas_filtradas.empty:
            display_despesas = despesas_filtradas[[
                'Empenho', 'Data', 'Nome Fornecedor', 'Nome da Fun√ß√£o', 
                'Empenhado at√© Hoje', 'Liquidado at√© Hoje', 'Pago at√© Hoje'
            ]].copy()
            
            display_despesas['Empenhado at√© Hoje'] = display_despesas['Empenhado at√© Hoje'].apply(format_currency)
            display_despesas['Liquidado at√© Hoje'] = display_despesas['Liquidado at√© Hoje'].apply(format_currency)
            display_despesas['Pago at√© Hoje'] = display_despesas['Pago at√© Hoje'].apply(format_currency)
            
            display_despesas.columns = ['Empenho', 'Data', 'Fornecedor', 'Fun√ß√£o', 'Empenhado', 'Liquidado', 'Pago']
            st.dataframe(display_despesas, use_container_width=True)
            
            # Estat√≠sticas das despesas filtradas
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total Empenhado", format_currency(despesas_filtradas['Empenhado at√© Hoje'].sum()))
            with col2:
                st.metric("Total Pago", format_currency(despesas_filtradas['Pago at√© Hoje'].sum()))
            with col3:
                execucao_pagamento = (despesas_filtradas['Pago at√© Hoje'].sum() / 
                                    despesas_filtradas['Empenhado at√© Hoje'].sum() * 100)
                st.metric("% Pago", f"{execucao_pagamento:.1f}%")

# Insights finais
st.divider()
st.header("üí° Insights da Execu√ß√£o Or√ßament√°ria")

col1, col2 = st.columns(2)

with col1:
    st.subheader("üéØ Indicadores Principais")
    
    # Compara√ß√£o LOA vs Execu√ß√£o
    if execucao_vs_loa > 90:
        status_loa = "üü¢ Excelente execu√ß√£o da LOA"
    elif execucao_vs_loa > 70:
        status_loa = "üü° Boa execu√ß√£o da LOA"
    else:
        status_loa = "üî¥ Execu√ß√£o baixa da LOA"
    
    st.write(f"**LOA vs Execu√ß√£o**: {execucao_vs_loa:.1f}% - {status_loa}")
    
    # Status da execu√ß√£o de receitas (portal transpar√™ncia)
    if percentual_execucao_receitas > 90:
        status_rec = "üü¢ Excelente execu√ß√£o"
    elif percentual_execucao_receitas > 70:
        status_rec = "üü° Boa execu√ß√£o"
    else:
        status_rec = "üî¥ Execu√ß√£o baixa"
    
    st.write(f"**Receitas (Portal)**: {percentual_execucao_receitas:.1f}% - {status_rec}")
    
    # Status do resultado or√ßament√°rio
    if resultado_orcamentario > 0:
        status_resultado = "üü¢ Super√°vit or√ßament√°rio"
    else:
        status_resultado = "üî¥ D√©ficit or√ßament√°rio"
    
    st.write(f"**Resultado**: {format_currency(resultado_orcamentario)} - {status_resultado}")
    
    # Liquidez dos empenhos
    liquidez = (total_pago_despesas / total_empenhado_despesas * 100) if total_empenhado_despesas > 0 else 0
    if liquidez > 80:
        status_liquidez = "üü¢ Alta liquidez"
    elif liquidez > 60:
        status_liquidez = "üü° Liquidez moderada"
    else:
        status_liquidez = "üî¥ Baixa liquidez"
    
    st.write(f"**Liquidez**: {liquidez:.1f}% - {status_liquidez}")

with col2:
    st.subheader("üìà Principais Achados")
    
    # Compara√ß√£o LOA vs Portal
    diferenca_loa_portal = total_arrecadado_receitas - total_loa_receitas
    if abs(diferenca_loa_portal) > total_loa_receitas * 0.1:  # Diferen√ßa > 10%
        if diferenca_loa_portal > 0:
            st.success(f"üìà **Arrecada√ß√£o superou LOA** em {format_currency(diferenca_loa_portal)}")
        else:
            st.warning(f"üìâ **Arrecada√ß√£o abaixo da LOA** em {format_currency(abs(diferenca_loa_portal))}")
    else:
        st.info(f"‚öñÔ∏è **Arrecada√ß√£o pr√≥xima da LOA** - Diferen√ßa: {format_currency(diferenca_loa_portal)}")
    
    # Maior receita individual
    maior_receita = receitas_df.loc[receitas_df['Arrec. Total'].idxmax()]
    st.write(f"üí∞ **Maior receita**: {maior_receita['Especifica√ß√£o'][:40]}... - {format_currency(maior_receita['Arrec. Total'])}")
    
    # Fun√ß√£o com maior gasto
    funcao_maior_gasto = despesas_df.groupby('Nome da Fun√ß√£o')['Empenhado at√© Hoje'].sum().idxmax()
    valor_maior_gasto = despesas_df.groupby('Nome da Fun√ß√£o')['Empenhado at√© Hoje'].sum().max()
    st.write(f"üèõÔ∏è **Fun√ß√£o com maior gasto**: {funcao_maior_gasto} - {format_currency(valor_maior_gasto)}")
    
    # Maior fornecedor
    maior_fornecedor = despesas_df.groupby('Nome Fornecedor')['Empenhado at√© Hoje'].sum().idxmax()
    valor_maior_fornecedor = despesas_df.groupby('Nome Fornecedor')['Empenhado at√© Hoje'].sum().max()
    st.write(f"üè¢ **Maior fornecedor**: {maior_fornecedor[:25]}... - {format_currency(valor_maior_fornecedor)}")

# Rodap√©
st.divider()
st.markdown("---")
st.markdown(f"""
<div style='text-align: center; color: #666;'>
    <p><strong>üèõÔ∏è Portal Transpar√™ncia - Munic√≠pio de Rifaina</strong></p>
    <p>An√°lise Completa: LOA vs Execu√ß√£o Or√ßament√°ria 2025 | Dados atualizados em: {datetime.now().strftime('%d/%m/%Y')}</p>
    <p><em>Este dashboard apresenta an√°lise comparativa entre o or√ßamento planejado (LOA) e a execu√ß√£o real das receitas e despesas.</em></p>
    <p><strong>Fontes:</strong> Lei Or√ßament√°ria Anual (LOA) + Portal de Transpar√™ncia + Dados de Execu√ß√£o</p>
</div>
""", unsafe_allow_html=True)
